maxSubArray

時間: O(n)
空間: O(n)

使用dp的概念，走訪每個元素一次，並檢查dp每個index最佳解
dp[i] = nums[i] + max(dp[i - 1], 0)：
使用局部最佳解dp[i-1]找出dp[i]，概念是dp[i-1]加上nums[i]能不能得到最佳解
若nums[i] < 0，那得出來的解一定更差，所以不如不要加，在此同時也宣告「連加到i時斷掉了」，從i+1開始要從0開始重新連加法
這樣也很合理，因為你卡了一個負的，結果一定會比較差，所以一定要重啟一個連加
也不必擔心算到目前的解會不見，因為我們有res = max(res, dp[i])存下來
若nums[i] >= 0．得出來的解一定更好，要加


所謂：並檢查dp每個index最佳解是指
dp[0]: "必須"包含nums[0]的最佳解
dp[2]: "必須"包含nums[0] ~ nums[2]2的最佳解
dp[k]: "必須"包含nums[0] ~ nums[k]的最佳解
由於是"必須包含"，所以正確答案並不一定出現在dp[n]最後一個index，概念跟LCS不太一樣

由於是"必須包含"，所以"dp[i] = nums[i] + max(dp[i - 1], 0)"
nums[i]就是必須包含的部分

盲區：
可能會想說每一步加上nums[i]很不直覺，怕這樣沒有算到連續的subarray，或是想說可能會錯失掉先前算的結果，但其實我們每一步的最佳解都已經存在dp了，所以只要找出dp的最大值就是答案

Example:
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
dp   = [-2, 1, -2, 4,  3, 5, 6,  1, 5]
